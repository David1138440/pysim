name: Tests

on:
  release:
    types: [published]

  workflow_dispatch:

jobs:
  build-mac-windows-wheels:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        python-version: ['3.9', '3.8', '3.7']
        os: ['macos-11', 'windows-2022']
    name: Python ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Python dependencies
        run: | 
          pip install wheel
          pip install -r requirements.txt

      - name: Install c++ dependendencies on macOS and build
        if: ${{matrix.os == 'macos-11'}}
        run: | 
          brew install eigen
          brew install boost
          python setup.py bdist_wheel

      - name: Install c++ dependendencies on windows and build
        if: ${{matrix.os == 'windows-2022'}}
        run: | 
          python get_external.py
          $Env:EIGEN_ROOT = $pwd.path + "\external\eigen-3.4.0-3147391d946bb4b6c68edd901f2add6ac1f31f8c"
          $Env:BOOST_ROOT = $pwd.path + "\external\boost_1_77_0"
          python setup.py bdist_wheel
        shell: powershell    

      - name: Archive wheel
        uses: actions/upload-artifact@v2
        with:
          name: wheel
          path: dist/*

  build-linux-wheels:
    runs-on: 'ubuntu-20.04'
    steps:
      - uses: actions/checkout@v2

      - name: Build manylinux wheels
        uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2014_x86_64
        with:
          python-versions: 'cp37-cp37m cp38-cp38 cp39-cp39'
          build-requirements: 'cython numpy'
          system-packages: 'eigen3-devel boost boost-devel'

      - name: Remove non-manylinux linux wheels
        run: sudo rm ./dist/*-linux_*

      - name: Archive wheel
        uses: actions/upload-artifact@v2
        with:
          name: wheel
          path: dist/*

  test:
    runs-on: ${{matrix.os}}
    needs: [build-linux-wheels, build-mac-windows-wheels]
    strategy:
      matrix:
        python-version: ['3.9', '3.8', '3.7']
        os: ['macos-11', 'ubuntu-20.04', 'windows-2022']
    name: Python ${{ matrix.python-version }} test on ${{ matrix.os }}

    steps:
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: wheel
          path: dist

      - name: install
        run: |
          pip install wheel
          pip install pytest
          pip install --find-links dist pysim

      - name: test
        run: python -c "import pysim;pysim.test()"


  publish:
    if: github.event.action == 'published'
    runs-on: 'ubuntu-20.04'
    needs: test

    steps:
      - uses: actions/checkout@v2

      - name: Build source dist
        run: | 
          pip3 install -r requirements.txt
          python3 setup.py sdist

      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: wheel
          path: dist
   
      - name: Archive dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/*

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
